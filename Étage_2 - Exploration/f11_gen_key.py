from Crypto.PublicKey import RSA

def generate_private_key_from_components(N, e, p, q):
    # Calcul de phi(n)
    phi_n = (p - 1) * (q - 1)

    # Calcul de d (exposant privé)
    d = pow(e, -1, phi_n)

    # Construction de la clé privée RSA
    key = RSA.construct((N, e, d, p, q))

    return key

# Composantes de la clé publique et privée

e = 238449422852892891538678530003362607565489295513201179758822134480891777

p = 170363316257160371952204264909286661787707905899860786016243676866322554718275558507734733900126992508865021376308009174948289773335994122801767870770018617493657491100117170432835521892451407114239459529930934263778976146834605401895952138503001790022504181633621398059412401986307834714479911754174066057839
q = 133797023834640083063884060416746315461425125510843249427098809491734418797330797149610171090619413791669116545032609088318579650454479007222822827595479608811824868839355103971426890868224553829937975518197010086320222027330670906702446804477093270762963778611702302957224652986597764613918785164654015350043
N = p * q
print("N calculé:", N)

# Génération de la clé privée
private_key = generate_private_key_from_components(N, e, p, q)

# Export de la clé privée au format PEM
private_key_pem = private_key.export_key('PEM')

# Affichage de la clé privée PEM
print(private_key_pem)


with open("private_key.pem", "wb") as f:
    f.write(private_key.export_key('PEM'))